/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Court;
import io.swagger.model.CourtRating;
import io.swagger.model.ModelApiResponse;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-08T20:35:21.763Z[GMT]")
@Validated
public interface CourtApi {

    @Operation(summary = "Create court", description = "", tags={ "court" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation") })
    @RequestMapping(value = "/court",
        consumes = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createCourt(@Parameter(in = ParameterIn.DEFAULT, description = "Created court object", required=true, schema=@Schema()) @Valid @RequestBody Court body);


    @Operation(summary = "Deletes a court", description = "", tags={ "court" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Court not found") })
    @RequestMapping(value = "/court/{courtId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCourt(@Parameter(in = ParameterIn.PATH, description = "Court id to delete", required=true, schema=@Schema()) @PathVariable("courtId") Long courtId);


    @Operation(summary = "Finds court by courtId", description = "", tags={ "court" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Court.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Court not found") })
    @RequestMapping(value = "/court/{courtId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Court> getCourtById(@Parameter(in = ParameterIn.PATH, description = "Id of court to return", required=true, schema=@Schema()) @PathVariable("courtId") Long courtId);


    @Operation(summary = "Get courts list", description = "", tags={ "court" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Court.class)))) })
    @RequestMapping(value = "/court",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Court>> getCourtsList(@Parameter(in = ParameterIn.QUERY, description = "The maximum number of results to retrieve" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit, @Parameter(in = ParameterIn.QUERY, description = "The zero-ary offset into the results" ,schema=@Schema()) @Valid @RequestParam(value = "offset", required = false) Integer offset, @Parameter(in = ParameterIn.QUERY, description = "How to sort the results" ,schema=@Schema(allowableValues={ "id", "name", "location", "rating" }
, defaultValue="id")) @Valid @RequestParam(value = "sort", required = false, defaultValue="id") String sort);


    @Operation(summary = "Rate court", description = "", tags={ "court" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = CourtRating.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/court/{courtId}/rate",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<CourtRating> rateCourt(@Parameter(in = ParameterIn.PATH, description = "Id of court to rate", required=true, schema=@Schema()) @PathVariable("courtId") Long courtId, @Parameter(in = ParameterIn.DEFAULT, description = "Rate object that needs to be added", required=true, schema=@Schema()) @Valid @RequestBody CourtRating body);


    @Operation(summary = "Update an existing court", description = "", tags={ "court" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Court not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/court",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCourt(@Parameter(in = ParameterIn.DEFAULT, description = "Court object that needs to be updated", required=true, schema=@Schema()) @Valid @RequestBody Court body);


    @Operation(summary = "Uploads an image", description = "", tags={ "court" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = ModelApiResponse.class))) })
    @RequestMapping(value = "/court/{courtId}/uploadImage",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> uploadCourtImage(@Parameter(in = ParameterIn.PATH, description = "ID of court to update", required=true, schema=@Schema()) @PathVariable("courtId") Long courtId, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestParam(value="additionalMetadata", required=false)  String additionalMetadata, @Parameter(description = "file detail") @Valid @RequestPart("file") MultipartFile file);

}

